name: Deploy to Render

on:
    workflow_dispatch:

jobs:
    deploy:
        runs-on: ubuntu-latest
        if: github.ref == 'refs/heads/prod'

        steps:
            - name: Check out repository
              uses: actions/checkout@v4
              with:
                  fetch-depth: 1

            - name: Setup environment
              id: env-setup
              run: |
                  # Create temporary file
                  TEMP_ENV=$(mktemp)
                  echo "${{ secrets.ENV_FILE }}" > "$TEMP_ENV"

                  # Check if file is empty
                  if [ ! -s "$TEMP_ENV" ]; then
                    echo "Warning: No environment variables found"
                    echo "env_vars=[]" >> $GITHUB_OUTPUT
                    rm -f "$TEMP_ENV"
                    exit 0
                  fi

                  # Process valid environment variables using Python for better handling
                  python3 - <<'EOF' > env_vars.json
                  import json
                  import re

                  def process_env_file(filepath):
                      env_vars = []
                      with open(filepath, 'r') as f:
                          for line in f:
                              line = line.strip()
                              if not line or line.startswith('#'):
                                  continue

                              if '=' not in line:
                                  continue

                              key, value = line.split('=', 1)
                              key = key.strip()
                              value = value.strip()

                              # Remove surrounding quotes if they exist
                              if value.startswith('"') and value.endswith('"'):
                                  value = value[1:-1]

                              if key and value:
                                  env_vars.append({
                                      "key": key,
                                      "value": value,
                                      "isSecret": True
                                  })

                      return json.dumps(env_vars)

                  print(process_env_file("$TEMP_ENV"))
                  EOF

                  # Clean up temp file
                  rm -f "$TEMP_ENV"

                  # Set output
                  echo "env_vars=$(cat env_vars.json)" >> $GITHUB_OUTPUT
                  rm -f env_vars.json

            - name: Update Render environment variables
              if: steps.env-setup.outputs.env_vars != '[]'
              run: |
                  response=$(curl -s -w "\n%{http_code}" -X PUT \
                    "https://api.render.com/v1/services/${{ secrets.RENDER_SERVICE_ID }}/env-vars" \
                    -H "Authorization: Bearer ${{ secrets.RENDER_API_KEY }}" \
                    -H "Accept: application/json" \
                    -H "Content-Type: application/json" \
                    -d "${{ steps.env-setup.outputs.env_vars }}")

                  status_code=$(echo "$response" | tail -n1)
                  response_body=$(echo "$response" | sed '$d')

                  if [ "$status_code" -ne 200 ]; then
                    echo "Failed to update environment variables. Status: $status_code"
                    echo "Response: $response_body"
                    exit 1
                  fi
              env:
                  RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
                  RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}

            - name: Trigger Render deployment
              id: deploy
              run: |
                  response=$(curl -s -w "\n%{http_code}" "${{ secrets.RENDER_DEPLOY_HOOK_URL }}")

                  status_code=$(echo "$response" | tail -n1)
                  response_body=$(echo "$response" | sed '$d')

                  if [ "$status_code" -ne 200 ]; then
                    echo "Deployment trigger failed. Status: $status_code"
                    echo "Response: $response_body"
                    exit 1
                  fi

                  echo "Deployment triggered successfully"
